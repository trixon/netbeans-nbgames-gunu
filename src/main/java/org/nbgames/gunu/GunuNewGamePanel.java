/*
 * Copyright 2016 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbgames.gunu;

import java.text.ParseException;
import org.nbgames.core.api.DictNbg;
import org.nbgames.core.api.Player;
import org.nbgames.core.api.db.manager.PlayerManager;
import org.nbgames.core.api.ui.NewGamePanel;
import org.openide.util.Exceptions;

/**
 *
 * @author Patrik Karlsson <patrik@trixon.se>
 */
public class GunuNewGamePanel extends NewGamePanel {

    private final Options mOptions = Options.getInstance();

    /**
     * Creates new form GunuNewGamePanel
     */
    public GunuNewGamePanel() {
        initComponents();
    }

    @Override
    public void load() {
        playerComboBox.setModel(PlayerManager.getInstance().getComboBoxModel());

        fromSpinner.setValue(mOptions.getFrom());
        toSpinner.setValue(mOptions.getTo());
    }

    @Override
    public void save() {
        String name = ((Player) playerComboBox.getSelectedItem()).getName();
        mOptions.setPlayer(name);

        try {
            fromSpinner.commitEdit();
            toSpinner.commitEdit();
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }

        Integer fromValue = (Integer) fromSpinner.getValue();
        Integer toValue = (Integer) toSpinner.getValue();

        mOptions.setFrom(Math.min(fromValue, toValue));
        mOptions.setTo(Math.max(fromValue, toValue));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        messageLabel = new javax.swing.JLabel();
        playerComboBox = new javax.swing.JComboBox();
        fromLabel = new javax.swing.JLabel();
        fromSpinner = new javax.swing.JSpinner();
        toLabel = new javax.swing.JLabel();
        toSpinner = new javax.swing.JSpinner();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(messageLabel, DictNbg.SELECT_PLAYER.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(messageLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(playerComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(fromLabel, org.openide.util.NbBundle.getMessage(GunuNewGamePanel.class, "GunuNewGamePanel.fromLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        add(fromLabel, gridBagConstraints);

        fromSpinner.setModel(new javax.swing.SpinnerNumberModel(-1000, -1000, 1000, 1));
        fromSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(fromSpinner, ""));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(fromSpinner, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(toLabel, org.openide.util.NbBundle.getMessage(GunuNewGamePanel.class, "GunuNewGamePanel.toLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        add(toLabel, gridBagConstraints);

        toSpinner.setModel(new javax.swing.SpinnerNumberModel(1000, -1000, 1000, 1));
        toSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(toSpinner, ""));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(toSpinner, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fromLabel;
    private javax.swing.JSpinner fromSpinner;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JComboBox playerComboBox;
    private javax.swing.JLabel toLabel;
    private javax.swing.JSpinner toSpinner;
    // End of variables declaration//GEN-END:variables
}
